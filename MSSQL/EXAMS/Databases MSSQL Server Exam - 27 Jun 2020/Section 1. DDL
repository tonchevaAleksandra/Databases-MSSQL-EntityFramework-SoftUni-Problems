CREATE DATABASE WMS

CREATE TABLE Clients
(
    ClientId  int PRIMARY KEY IDENTITY,
    FirstName varchar(50) NOT NULL,
    LastName  varchar(50) NOT NULL,
    Phone     char(12) CHECK (LEN(Phone) = 12)

)

CREATE TABLE Mechanics
(
    MechanicId int PRIMARY KEY IDENTITY,
    FirstName  varchar(50)  NOT NULL,
    LastName   varchar(50)  NOT NULL,
    Address    varchar(max) NOT NULL

)

CREATE TABLE Models
(
    ModelId int PRIMARY KEY IDENTITY,
    Name    varchar(50) NOT NULL UNIQUE

)


CREATE TABLE Jobs
(
    JobId      int PRIMARY KEY IDENTITY,
    ModelId    int  NOT NULL REFERENCES Models (ModelId),
    Status     varchar(11) CHECK (Status IN ('Pending', 'In Progress', 'Finished')) DEFAULT 'Pending',
    ClientId   int  NOT NULL REFERENCES Clients (ClientId),
    MechanicId int REFERENCES Mechanics (MechanicId),
    IssueDate  date NOT NULL,
    FinishDate date

)
CREATE TABLE Orders
(
    OrderId   int PRIMARY KEY IDENTITY,
    JobId     int NOT NULL REFERENCES Jobs (JobId),
    IssueDate date,
    Delivered bit NOT NULL DEFAULT 0

)
CREATE TABLE Vendors
(
    VendorId int PRIMARY KEY IDENTITY,
    Name     varchar(50) NOT NULL UNIQUE

)
CREATE TABLE Parts
(
    PartId       int PRIMARY KEY IDENTITY,
    SerialNumber varchar(50)   NOT NULL UNIQUE,
    Description  varchar(max),
    Price        decimal(6, 2) NOT NULL CHECK (Price > 0),
    VendorId     int           NOT NULL REFERENCES Vendors (VendorId),
    StockQty     int           NOT NULL CHECK (StockQty >= 0) DEFAULT 0

)

CREATE TABLE OrderParts
(
    OrderId  int NOT NULL REFERENCES Orders (OrderId),
    PartId   int NOT NULL REFERENCES Parts (PartId),
    Quantity int NOT NULL CHECK (Quantity > 0) DEFAULT 1
        PRIMARY KEY (OrderId, PartId)
)
CREATE TABLE PartsNeeded
(
    JobId    int NOT NULL REFERENCES Jobs (JobId),
    PartId   int NOT NULL REFERENCES Parts (PartId),
    Quantity int NOT NULL CHECK (Quantity > 0) DEFAULT 1
        PRIMARY KEY (JobId, PartId)

)
BACKUP DATABASE WMS TO DISK ='F:\backup\SQL-WMS Database.bak'

SELECT *
FROM Jobs
--Section 2. DML
--2.	Insert

INSERT INTO Clients(FirstName, LastName, Phone)
VALUES ('Teri', 'Ennaco', '570-889-5187'),
       ('Merlyn', 'Lawler', '201-588-7810'),
       ('Georgene', 'Montezuma', '925-615-5185'),
       ('Jettie', 'Mconnell', '908-802-3564'),
       ('Lemuel', 'Latzke', '631-748-6479'),
       ('Melodie', 'Knipp', '805-690-1682'),
       ('Candida', 'Corbley', '908-275-8357')

INSERT INTO Parts(SerialNumber, Description, Price, VendorId)
VALUES ('WP8182119', 'Door Boot Seal', 117.86, 2),
       ('W10780048', 'Suspension Rod', 42.81, 1),
       ('W10841140', 'Silicone Adhesive ', 6.77, 4),
       ('WPY055980', 'High Temperature Adhesive', 13.94, 3)

--3.	Update
SELECT MechanicId
FROM Mechanics
WHERE FirstName LIKE 'Ryan'
SELECT COUNT(*)
FROM Jobs
WHERE Status LIKE 'Pending'--2

UPDATE Jobs
SET MechanicId=3,
    Status='In Progress'
WHERE Status LIKE 'Pending'
--2 rows affected

--4.	Delete

DELETE OrderParts
WHERE OrderId = 19
DELETE Orders
WHERE OrderId = 19

--Section 3. Querying
USE master
RESTORE DATABASE WMS FROM DISK ='F:\backup\SQL-WMS Database.bak'

USE WMS

--5.	Mechanic Assignments

SELECT CONCAT(m.FirstName, ' ', m.LastName) AS Mechanic,
       j.Status,
       j.IssueDate
FROM Mechanics AS m
         JOIN Jobs J ON m.MechanicId = J.MechanicId
ORDER BY m.MechanicId, j.IssueDate, j.JobId

--6.	Current Clients

SELECT CONCAT(c.FirstName, ' ', c.LastName)     AS Client,
       DATEDIFF(DAY, j.IssueDate, '2017-04-24') AS [Days going],
       j.Status
FROM Clients AS c
         JOIN Jobs J ON c.ClientId = J.ClientId
WHERE j.Status NOT LIKE 'Finished'
ORDER BY [Days going] DESC, c.ClientId

--7.	Mechanic Performance
SELECT CONCAT(m.FirstName, ' ', m.LastName)          AS Mechanic,
       AVG(DATEDIFF(DAY, j.IssueDate, j.FinishDate)) AS [Average Days]
FROM Mechanics AS m
         JOIN Jobs J ON m.MechanicId = J.MechanicId
GROUP BY m.FirstName, m.LastName, m.MechanicId
ORDER BY m.MechanicId

--8.	Available Mechanics
SELECT mJA.Available
FROM (SELECT CONCAT(m.FirstName, ' ', m.LastName) AS Available,
             j.MechanicId
      FROM Mechanics AS m
               LEFT JOIN Jobs J ON m.MechanicId = J.MechanicId
      WHERE J.Status LIKE 'Finished'
      GROUP BY m.FirstName, m.LastName, j.MechanicId) AS mJA
ORDER BY mja.MechanicId

--9.	Past Expenses
SELECT j.JobId, SUM(p.Price) AS Total
FROM Jobs AS j
         JOIN PartsNeeded PN ON j.JobId = PN.JobId
         JOIN Parts P ON PN.PartId = P.PartId
WHERE j.Status LIKE 'Finished'
GROUP BY j.JobId
ORDER BY Total DESC, j.JobId


--NOT PASS IN JUDGE
--10.	Missing Parts
--Not Working Code
SELECT k.PartId, k.Description, k.Required, k.[In Stock], k.count AS Ordered
FROM (SELECT p.PartId, p.Description, pn.Quantity AS Required, p.StockQty AS [In Stock], COUNT(o2.OrderId) AS count
      FROM Jobs AS j
               JOIN PartsNeeded PN ON j.JobId = PN.JobId
               JOIN Parts P ON PN.PartId = P.PartId
               JOIN OrderParts OP ON P.PartId = OP.PartId
               JOIN Orders O2 ON j.JobId = O2.JobId AND OP.OrderId = O2.OrderId
      WHERE j.Status NOT LIKE 'Finished'
        AND pn.Quantity > p.StockQty
        AND O2.Delivered = 0
      GROUP BY p.PartId, p.Description, pn.Quantity, p.StockQty) AS k

--NOT PASS IN JUDGE
--Section 4. Programmability
--11.	Place Order

CREATE OR
ALTER PROC usp_PlaceOrder(@jobId int, @partNumber varchar(50), @quantity int)
AS
BEGIN
    BEGIN TRANSACTION
        IF (@quantity <= 0)
            BEGIN
                THROW 50012, 'Part quantity must be more than zero!',1
            END
        IF (@jobId IN (SELECT JobId FROM Jobs WHERE Status LIKE 'Finished'))
            BEGIN
                THROW 50011, 'This job is not active!',1
            END

        IF (@jobId NOT IN (SELECT JobId FROM Jobs))
            BEGIN
                THROW 50013, 'Job not found!',1
            END
        IF (@partNumber NOT IN (SELECT SerialNumber FROM Parts))
            BEGIN
                THROW 50014, 'Part not found!',1
            END
        IF (@jobId IN (SELECT JobId FROM Orders) AND (SELECT IssueDate FROM Orders WHERE JobId = @jobId) IS NULL)
            BEGIN
                DECLARE @orderId int = (SELECT OrderId FROM Orders WHERE JobId = @jobId AND IssueDate IS NULL)
                DECLARE @partId int= (SELECT PartId FROM Parts WHERE SerialNumber = @partNumber)
                IF (@orderId IN (SELECT OrderId FROM OrderParts) AND @partId IN (SELECT PartId FROM OrderParts))
                    BEGIN
                        UPDATE OrderParts
                        SET Quantity+=@quantity
                        WHERE OrderId = @orderId
                          AND PartId = @partId
                    END
                ELSE
                    BEGIN
                        INSERT INTO OrderParts(OrderId, PartId, Quantity)
                        VALUES (@orderId, @partId, @quantity)
                    END


            END
    COMMIT
END

DECLARE @err_msg AS NVARCHAR(MAX);
BEGIN TRY
    EXEC usp_PlaceOrder 1, 'ZeroQuantity', 0
END TRY
BEGIN CATCH
    SET @err_msg = ERROR_MESSAGE();
    SELECT @err_msg
END CATCH


--12.	Cost Of Order

    CREATE FUNCTION udf_GetCost(@jobId int)
        RETURNS decimal(18, 2) AS
    BEGIN
        DECLARE @sum decimal(18, 2)= (SELECT SUM(P.Price)
                                      FROM Orders AS O
                                               JOIN OrderParts OP ON O.OrderId = OP.OrderId
                                               JOIN Parts AS P ON OP.PartId = P.PartId
                                      WHERE O.JobId = @jobId
                                      GROUP BY O.JobId
        )
        IF (@sum IS NULL)
            BEGIN
                RETURN 0;
            END
        RETURN @sum;
    END

SELECT dbo.udf_GetCost(1)












