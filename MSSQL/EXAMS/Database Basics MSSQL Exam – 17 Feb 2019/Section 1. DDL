USE master

CREATE DATABASE School
USE School

CREATE TABLE Students
(
    Id         int PRIMARY KEY IDENTITY,
    FirstName  nvarchar(30) NOT NULL,
    MiddleName nvarchar(25),
    LastName   nvarchar(30) NOT NULL,
    Age        int CHECK (Age >= 5 AND Age <= 100),
    Address    nvarchar(100),
    Phone      nchar(10)

)

CREATE TABLE Subjects
(
    Id      int PRIMARY KEY IDENTITY,
    Name    nvarchar(20) NOT NULL,
    Lessons int          NOT NULL CHECK (Lessons > 0)

)

CREATE TABLE StudentsSubjects
(
    Id        int PRIMARY KEY IDENTITY,
    StudentId int           NOT NULL REFERENCES Students (Id),
    SubjectId int           NOT NULL REFERENCES Subjects (Id),
    Grade     decimal(3, 2) NOT NULL CHECK (Grade >= 2.00 AND Grade <= 6.00)

)

CREATE TABLE Exams
(
    Id        int PRIMARY KEY IDENTITY,
    Date      datetime,
    SubjectId int NOT NULL REFERENCES Subjects (Id)

)

CREATE TABLE StudentsExams
(
    StudentId int           NOT NULL REFERENCES Students (Id),
    ExamId    int           NOT NULL REFERENCES Exams (Id),
    Grade     decimal(3, 2) NOT NULL CHECK (Grade >= 2.00 AND Grade <= 6.00)

)

CREATE TABLE Teachers
(
    Id        int PRIMARY KEY IDENTITY,
    FirstName nvarchar(20) NOT NULL,
    LastName  nvarchar(20) NOT NULL,
    Address   nvarchar(20) NOT NULL,
    Phone     nchar(10),
    SubjectId int          NOT NULL REFERENCES Subjects (Id)

)
CREATE TABLE StudentsTeachers
(
    StudentId int NOT NULL REFERENCES Students (Id),
    TeacherId int NOT NULL REFERENCES Teachers (Id)

)

--Section 2. DML
--2. Insert
INSERT INTO Teachers(FirstName, LastName, Address, Phone, SubjectId)
VALUES ('Ruthanne', 'Bamb', '84948 Mesta Junction', '3105500146', 6),
       ('Gerrard', 'Lowin', '370 Talisman Plaza', '3324874824', 2),
       ('Merrile', 'Lambdin', '81 Dahle Plaza', '4373065154', 5),
       ('Bert', 'Ivie', '2 Gateway Circle', '4409584510', 4)

INSERT INTO Subjects(Name, Lessons)
VALUES ('Geometry', 12),
       ('Health', 10),
       ('Drama', 7),
       ('Sports', 9)

--3. Update
UPDATE StudentsSubjects
SET Grade=6.00
WHERE SubjectId IN (1, 2)
  AND Grade >= 5.50

--4. Delete
DELETE StudentsTeachers
WHERE TeacherId IN
      (SELECT TeacherId
       FROM Teachers
       WHERE Phone LIKE '%72%')

DELETE Teachers
WHERE Phone LIKE '%72%'

--5. Teen Students

SELECT FirstName, LastName, Age
FROM Students
WHERE Age >= 12
ORDER BY FirstName, LastName

--6. Cool Addresses
SELECT CONCAT(FirstName, ' ', MiddleName, ' ', LastName) AS [Full Name],
       Address
FROM Students
WHERE Address LIKE '%road%'
ORDER BY FirstName, LastName, Address

--7. 42 Phones
SELECT FirstName, Address, Phone
FROM Students
WHERE MiddleName IS NOT NULL
  AND Phone LIKE '42%'
ORDER BY FirstName

--8. Students Teachers

SELECT s.FirstName, s.LastName, COUNT(st.TeacherId) AS TeachersCount
FROM Students AS s
         JOIN StudentsTeachers ST ON s.Id = ST.StudentId
GROUP BY s.FirstName, s.LastName

--9. Subjects with Students

SELECT CONCAT(t.FirstName, ' ', t.LastName)                 AS FullName,
       CONCAT(s.Name, '-', CAST(s.Lessons AS NVARCHAR(30))) AS Subjects,
       COUNT(st.StudentId)                                  AS Students
FROM Teachers AS t
         JOIN StudentsTeachers ST ON t.Id = ST.TeacherId
         JOIN Subjects S ON S.Id = t.SubjectId
GROUP BY t.FirstName, t.LastName, s.Name, s.Lessons
ORDER BY COUNT(st.StudentId) DESC,
         FullName,
         Subjects

--10. Students to Go

SELECT CONCAT(FirstName, ' ', LastName) AS [Full Name]
FROM Students
WHERE Id NOT IN (SELECT StudentId FROM StudentsExams)
ORDER BY [Full Name]

--11. Busiest Teachers
SELECT T.FirstName, T.LastName, COUNT(ST.StudentId) AS StudentsCount
FROM Teachers AS T
         JOIN StudentsTeachers ST ON T.Id = ST.TeacherId
GROUP BY T.FirstName, T.LastName
ORDER BY StudentsCount DESC, T.FirstName, T.LastName

--12. Top Students
SELECT TOP (10) S.FirstName, S.LastName, CAST(AVG(SE.Grade) AS decimal(3, 2)) AS Grade
FROM StudentsExams AS SE
         JOIN Students S ON SE.StudentId = S.Id
GROUP BY s.FirstName, S.LastName
ORDER BY Grade DESC, s.FirstName, s.LastName

--13. Second Highest Grade
SELECT R.FirstName, R.LastName, R.Grade
FROM (SELECT S.FirstName,
             S.LastName,
             SS.Grade,
             ROW_NUMBER() OVER
                 (PARTITION BY S.FirstName,S.LastName
                 ORDER BY SS.Grade DESC) AS [ROW]
      FROM Students AS S
               JOIN StudentsSubjects SS ON S.Id = SS.StudentId) AS R
WHERE [ROW] = 2
ORDER BY R.FirstName, R.LastName

--14. Not So In The Studying

SELECT CONCAT(FirstName, ' ',
              ISNULL(MiddleName + ' ', ''), ' ', LastName)
           AS [Full Name]
FROM Students
WHERE id NOT IN (SELECT StudentId FROM StudentsSubjects)
ORDER BY [Full Name]

--15. Top Student per Teacher
SELECT r1.[Teacher Full Name],
       r1.[Subject Name],
       r1.[Student Full Name],
       CAST(r1.Grade AS decimal(3, 2)) AS Grade
FROM (SELECT r.[Teacher Full Name],
             r.[Subject Name],
             r.[Student Full Name],
             Grade                                                                        AS [Grade],
             ROW_NUMBER() OVER (PARTITION BY r.[Teacher Full Name] ORDER BY r.Grade DESC) AS Rank
      FROM (SELECT CONCAT(t.FirstName, ' ', t.LastName)   AS [Teacher Full Name],
                   s.Name                                 AS [Subject Name],
                   AVG(ss.grade)                          AS Grade,
                   CONCAT(s2.FirstName, ' ', s2.LastName) AS [Student Full Name]
            FROM Teachers AS t
                     JOIN Subjects S ON t.SubjectId = S.Id
                     JOIN StudentsSubjects SS ON S.Id = SS.SubjectId
                     JOIN Students S2 ON S2.Id = ss.StudentId
                     JOIN StudentsTeachers ST ON t.Id = ST.TeacherId AND s2.Id = ST.StudentId
            GROUP BY t.FirstName, t.LastName, s.Name, s2.FirstName, s2.LastName)
               AS R)
         AS R1
WHERE R1.Rank = 1
ORDER BY r1.[Subject Name], r1.[Teacher Full Name], r1.Grade DESC

--16. Average Grade per Subject

SELECT (SELECT name
        FROM Subjects
        WHERE Id = s.Id) AS Name,
       AVG(ss.Grade)     AS AverageGrade
FROM Subjects AS s
         JOIN StudentsSubjects SS ON s.Id = SS.SubjectId
GROUP BY s.Id
ORDER BY s.Id

--17. Exams Information
SELECT Query1.Quarter,
       Query1.SubjectName,
       COUNT(Query1.StudentId) AS StudentsCount
FROM (SELECT CASE
                 WHEN DATEPART(MONTH, e.Date) BETWEEN 1 AND 3 THEN 'Q1'
                 WHEN DATEPART(MONTH, e.Date) BETWEEN 4 AND 6 THEN 'Q2'
                 WHEN DATEPART(MONTH, e.Date) BETWEEN 7 AND 9 THEN 'Q3'
                 WHEN DATEPART(MONTH, e.Date) BETWEEN 10 AND 12 THEN 'Q4'
                 ELSE 'TBA'
                 END AS Quarter,
             s.Name  AS SubjectName,
             se.StudentId,
             se.Grade
      FROM Exams AS e
               JOIN Subjects S ON e.SubjectId = S.Id
               JOIN StudentsExams SE ON e.Id = SE.ExamId) AS Query1
WHERE Query1.Grade >= 4.00
GROUP BY Query1.Quarter, Query1.SubjectName
ORDER BY Query1.Quarter

--Section 4. Programmability
--18. Exam Grades

CREATE FUNCTION udf_ExamGradesToUpdate(@studentId int, @grade decimal(10, 2))
    RETURNS nvarchar(max)
AS
BEGIN
    IF (@grade > 6.00)
        BEGIN
            RETURN 'Grade cannot be above 6.00!'
        END
    IF (@studentId NOT IN (SELECT id FROM Students))
        BEGIN
            RETURN 'The student with provided id does not exist in the school!'
        END

    DECLARE @count int=
        (SELECT COUNT(Grade)
         FROM StudentsExams
         WHERE StudentId = @studentId
           AND Grade BETWEEN @grade AND @grade + 0.50
        )

    DECLARE @FirstName nvarchar(30) =
        (SELECT FirstName
         FROM Students
         WHERE Id = @studentId)

    RETURN
            'You have to update ' + CAST(@count AS nvarchar(10)) + ' grades for the student ' + @FirstName

END
SELECT dbo.udf_ExamGradesToUpdate(12, 6.20)
SELECT dbo.udf_ExamGradesToUpdate(12, 5.50)
SELECT dbo.udf_ExamGradesToUpdate(121, 5.50)

--19. Exclude from school
CREATE PROC usp_ExcludeFromSchool(@StudentId int)
AS
BEGIN
    IF (@StudentId NOT IN (SELECT Id FROM Students))
        BEGIN
            THROW 50001, 'This school has no student with the provided id!',1
        END
    DELETE StudentsExams
    WHERE StudentId = @StudentId
    DELETE StudentsSubjects
    WHERE StudentId = @StudentId
    DELETE StudentsTeachers
    WHERE StudentId = @StudentId
    DELETE Students
    WHERE Id = @StudentId
END

    EXEC usp_ExcludeFromSchool 1
SELECT COUNT(*)
FROM Students
    EXEC usp_ExcludeFromSchool 301

--20. Deleted Student

    CREATE TABLE ExcludedStudents
    (
        StudentId   int,
        StudentName nvarchar(100)
    )
    CREATE TRIGGER tr_DeletedStudents
        ON Students
        FOR DELETE
        AS
    BEGIN
        INSERT INTO ExcludedStudents(StudentId, StudentName)
            (SELECT d.Id,
                    CONCAT(d.FirstName, ' ', d.LastName)
            FROM deleted AS d)
    END

DELETE FROM StudentsExams
WHERE StudentId = 2

DELETE FROM StudentsTeachers
WHERE StudentId = 2

DELETE FROM StudentsSubjects
WHERE StudentId = 2

DELETE FROM Students
WHERE Id = 2

SELECT * FROM ExcludedStudents






